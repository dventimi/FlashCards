#+OPTIONS: toc:nil f:nil
#+OPTIONS: tex:dvipng
#+HTML_HEAD_EXTRA: <style type="text/css">
#+HTML_HEAD_EXTRA: dt {text-align: center;}
#+HTML_HEAD_EXTRA: dd {text-align: center;}
#+HTML_HEAD_EXTRA: li {text-align: left;}
#+HTML_HEAD_EXTRA: table {margin-left: auto; margin-right: auto;}
#+HTML_HEAD_EXTRA: </style>
#+LATEX_HEADER: \usepackage{mathrsfs}
# #+LATEX_HEADER: \usepackage{amsmath}
# #+LATEX_HEADER: \usepackage{amssymb}
# #+LATEX_HEADER: \usepackage{cancel}

#+TITLE:  Essential Computer Mathematics
#+AUTHOR: David A. Ventimiglia
#+EMAIL: dventimi@gmail.com

* Binary Number System
  - Test ::
	   \[ \mathscr{P} \]

  - What does /bistable/ mean?  [fn::page 1]  ::

       /Bistable/ refers to the way that many of the electronic
       components in a computer can be in either of two states.

  - What does /bit/ mean?  [fn::page 1]  ::

       /Bit/ is short for "binary digit."

  - What does /positional numeration system/ mean?  [fn::page 1]  :: 

       A /positional numeration system/ requires only a finite number
       of symbols, called /digits/ of the system, to represent
       arbitrarily large numbers.

  - What does /base/ or /radix/ mean in a positional number system?  [fn::page 1]  :: 

       The /base/ or /radix/ in a positional number system is $b$, the
       number of digits in the system.  Any number can be represented
       as a sum of powers of $b$, where each power is weighted by one
       of the digits.

  - What does /expanded notation/ mean? [fn::page 1]  :: 

       The expression of a positive integer $N$ as a sum of powers of
       base $b$, with each power weighted by a digit.

  - What do /place values/ mean?  [fn::page 1] :: 

       The powers of base $b$ that correspond respectively to the
       digits in a number expressed in a positional numeration system.

  - What do /decimal places/ mean?  [fn::page 2] :: 

       /Decimal places/ refer to the digits to the right of the
       decimal point of a decimal fraction.

  - What is the /binary system/?  [fn::page 3] :: 

       The /binary system/ is the positional numeration system to the
       base $b = 2$, with fractional numbers having a /binary point/
       and non-fractional numbers being /binary integers/.

  - What is a way to perform /binary-to-decimal conversion/ of a binary number $N_B$?  [fn::page 3] :: 

       Write the number $N_B$ in expanded notation as the sum of each digit
       times that digit's place value.

  - What is a way to perform /decimal-to-binary conversion/ of a decimal number $N = N_I.N_F$?  [fn::page 4] :: 

    1. Divide $N_I$ and each successive quotient by two, noting the
       remainders.  The zero quotient ends the calculation.  Observe
       that the remainders can only be 0 or 1.  The sequence of
       remainders from last to first yields the binary equivalent of
       $N_I$.

    2. Multiply $N_F$ and each successive fractional part by 2, noting
       the integral part of the product.  The 0 fractional part
       indicates the end of the calculations.  Observe that the
       integral part of any product can only be 0 or 1.  The sequence
       of integral-part digits from first to last yields the binary
       equivalent of $N_F$.

    3. Be alert for a repeating pattern of bits, and indicate the
       pattern by appending a set of ellipses ($\ldots$).

    4. The binary equivalent of $N$ is simply the sum of the two
       equivalents.

       \[ N = N_I + N_F \]

  - What is a way to perform /binary addition/ of two numbers?  [fn::page 7] ::

    1. Add the first (rightmost) column.

    2. Record the units digit of the column sum.  If the sum exceeds
       9, carry the tens digit 1 to the next column.

    3. If there are additional columns or if there is a carry from
       Step 2, add the next column and repeat Step 2.  Otherwise,
       stop.

  - What are the two numbers in a sum called?  [fn::page 7] ::

       The first is called the /addend/.  The second is called the
       /augend/.

  - What are the basic properties of the addition algorithm of two numbers?  [fn::page 8] :: 

       Any two numbers can be added if one merely knows two facts,
       usually presented an /addition table/ or as /addition facts/.

    1. the addition of any two digits, and

    2. the addition of two digits and a carry of 1.

  - What is the addition table and what are the addition facts of binary digits?  [fn::page 8] ::

      #+CAPTION: Binary Addition Table
      |---+---+----|
      | + | 0 |  1 |
      |---+---+----|
      | / | < |  < |
      | 0 | 0 |  1 |
      | 1 | 1 | 10 |
      |---+---+----|

      #+CAPTION:  Binary Addition Facts
      |----------------------------------|
      | 0 + 0 = 0                        |
      | 0 + 1 = 1                        |
      | 1 + 0 = 1                        |
      | 1 + 1 = 0, with a carry of 1     |
      | 1 + 1 + 1 = 1, with a carry of 0 |
      |----------------------------------|

  - What is a way to perform /binary multiplication/ of two numbers?  [fn::page 10] ::

    1. Line up the numbers /very carefully/.

    2. Multiply pairs of digits one pair at a time from right to left,
       applying the /binary addition facts/.

  - What is a simple way to perform /binary subtraction/ of two numbers?  [fn::page 10] ::

    1. Line up the numbers /very carefully/.

    2. If the lower (/subtrahend/) digit is greater than the upper
       (/minuend/) digit, borrow from the next column to the left.

    3. Subtract the lower value from the upper value.

  - What are the subtraction facts of binary digits?  [fn::page 12] ::

       #+CAPTION:  Binary Subtraction Facts
       |----------------------------------------------------|
       | 0 - 0 = 0                                          |
       | 1 - 0 = 1                                          |
       | 1 - 1 = 0                                          |
       | 0 - 1 = 1, with a borrow of 1 from the next column |
       |----------------------------------------------------|

  - What two separate but related situations in computer mathematics involve /complements/?  [fn::page 14] ::

    1. Complements are involved in storing numbers in the computer,
       since many computers store negative numbers in the form of
       their arithmetic complements.

    2. Complements arise in the operation of subtraction, by reducing
       subtraction to addition.  This is useful because it avoids the
       possibility of repeated borrowings from one column to another.

  - What are two types of complements?  [fn::page 14] ::

    1. /Radix-minus-one complement/: Subtract each digit from the
       base.

    2. /Radix complement/ (or simply /complement/): Add 1 to the
       radix-minus-one complement.

  - In a calculator that has registers of a fixed number of digits, what happens if addition yields extra digits?  [fn::page 15] ::

       The extra digits, i.e. the most significant digits (leading
       digits) typically are just dropped.

  - What does /overflow/ mean?  [fn::page 16] ::

       /Overflow/ is that part of the result of an operation which is
       lost because the resulting value exceeds the capacity of the
       intended storage location.

  - What are the two circumstances for overflow in subtraction?  [fn::page 16] ::

    1. When the subtrahend is less than the minuend and we are adding
       the complement of the subtrahend to the minuend.  Then we drop
       the most significant digits.

    2. When the minuend is less than the subtrahend and we are adding
       the complement of the subtrahend to the minuend.  Then we take
       the complement of the result.

  - What is a simple way to find the complement of a binary number?  [fn::page 16] ::

       Simply invert each digit.  I.e. 0 is replaced by 1 and 1 is
       replaced by 0.

* Computer Codes

  - What do we mean by /digits/?  [fn::page 28]  ::

       The $b$ symbols---where $b > 1$ is the /base/ of the
       system---are called the /digits/ of the system.

       Any integer $N$ is represented in the system by a sequence of
       base-/b/ digits:

       \[ N = a_n a_{n-1} \ldots a_1 a_0 \]

       Then $b^k$ is the /place value/ of $a_k$ and

       \[ N = a_n \times b^n + a_{n-1} \times b^{n-1} + \ldots + a_2 \times b^2 + a_1 \times b^1 + a_0 \times b^0 \]

       is called the /expanded form/ or /expanded notation/ for $N$.

  - What is an algorithm to perform *Base-/b/-to-Decimal* conversion of a number $N_b$?  [fn::page 29]  ::

    1. *Integral part* $N_I$: Multiply the leftmost digit by the base $b$
       and add the next digit to the right.  Multiply the sum by
       the base $b$ and add the next digit.  Repeat the process
       until the rightmost digit is added.  The final sum is the
       required decimal equivalent.

    2. *Fractional part* $N_F$: Multiply the rightmost digit by $1/b$ and
       add the next digit to the left.  Multiply the sum by $1/b$ and
       add the next digit.  Repeat the process until the leftmost
       digit is added and the sum is multiplied by $1/b$.  The final
       product is the required decimal equivalent.

    3. Combine the *integral* and *fractional* parts:  $N = $N_I + $N_F$.

  - What is an algorithm to perform *Decimal-to-Base-/b/* conversion of a number $N$?  [fn::page 30]  ::

    1. *Integral part* $N_I$: Divide $N_I$ and each succeeding
       quotient by $b$ until a zero quotient is obtained.  The
       sequence of remainders, in reverse order, yields the base-/b/
       representation of $N_I$.

    2. *Fractional part* $N_F$: Multiply $N_F$ and the fractional part
       of each succeeding product by /b/ until a 0 fractional part or
       a duplicate fractional part is obtained.  Then the finite
       sequence or infinite repeating sequence of integral parts of
       the products gives the base-/b/ representation of $N_F$.

  - What is the binary equivalent of the octal digit 0?  [fn::page 30] ::

       000

  - What is the binary equivalent of the octal digit 1?  [fn::page 30] :: 

       001

  - What is the binary equivalent of the octal digit 2?  [fn::page 30] :: 

       010

  - What is the binary equivalent of the octal digit 3?  [fn::page 30] :: 

       011

  - What is the binary equivalent of the octal digit 4?  [fn::page 30] :: 

       100

  - What is the binary equivalent of the octal digit 5?  [fn::page 30] :: 

       101

  - What is the binary equivalent of the octal digit 6?  [fn::page 30] :: 

       110

  - What is the binary equivalent of the octal digit 7?  [fn::page 30] :: 

       111

  - What is a simple procedure for adding two octal numbers?  [fn::page 33] :: 

    1. Sum the individual pairs of digits taken from each number, left to right.

    2. From right to left, for each sum of pairs of digits, if the sum
       exceeds 7 then subtract 8 and carry a 1 to the next column

  - What is a simple procedure for adding two hexadecimal numbers?  [fn::page 33] :: 

    1. Sum the individual pairs of digits taken from each number, left to right.

    2. From right to left, for each sum of pairs of digits, if the sum
       exceeds 15 then subtract 16 and carry a 1 to the next column

  - What is /straight binary encoding/?  [fn::page 37]  ::

       It is a way of representing numerical data in binary form, in
       which the number is simply represented as the number in base 2.

  - What is /binary-coded decimal/?  [fn::page 37]  ::

       It is a way of representing numerical data in binary form, in
       which the number uses at least 4 bits for each decimal digit.

  - What is /Weighted 8-4-2-1 BCD/ code?  [fn::page 37]  :: 

       It is a 4-bit binary-coded decimal representation in which the
       bits are given, from left to right, the weights 8, 4, 2, and 1,
       respectively.  These weights are just the /place values/ in the
       binary system.  In this system, a decimal digit is encoded as
       its binary representation.

  - What is /Non-weighted XS-3 BCD/ code?  [fn::page 38]  :: 

       The /excess-three/ BCD code for a decimal digit /d/ adds $3 =
       0011_2$ to the 8-4-2-1 BCD code for /d/.  It encodes a pair of
       nines complements as a pair of ones complements.

  - What are some advantages of BCD codes over straight binary coding?  [fn::page 38]  ::

    1. Conversion between decimal and BCD is simpler than between
       decimal and straight binary coding.

    2. There is no round-off error in BCD encoding, but there /may/ be
       in straight binary coding.

  - What are some advantages of straight binary coding over BCD codes?  [fn::page 38]  ::

    1. Straight binary coding usually requires fewer bits to represent a number than do BCD codes.

    2. Arithmetic is easier.

  - What does /alphameric/ data mean?  [fn::page 39]  ::

       Alphameric data consists of both numeric and non-numeric items.

  - How many special characters can a 6-digit BCD code support?  [fn::page 39]  :: 

       \[2^6 - 36 = 28\] special characters

  - Describe 6-bit BCD codes.  [fn::page 39]  :: 

       The 6-bit BCD code adds two bits, called /zone bits/ and
       labeled /position B/ and /position A/, to the four 8-4-2-1 /numeric bits/, as shown:

       #+CAPTION: 6-bit BCD Code
       |---+---+---+---+---+---|
       | / |   |<  |   |   |   |
       | B | A | 8 | 4 | 2 | 1 |
       |---+---+---+---+---+---|

       Digits are coded with 0s for both zone bits and their 8-4-2-1
       BCD code for the numeric bits (except for the digit 0, which is
       coded as if it were a ten).  Alphabetical and special
       characters are encoded by combinations of both zone bits and
       numeric bits.

  - What does /check bit/ or /parity bit/ mean?  [fn::page 39]  ::

       A /check bit/ or /parity bit/ is a bit added to a 6-bit BCD
       code to produce a 7-bit form, as shown:

       #+CAPTION: 7-bit BCD Code
       |---+---+---+---+---+---+---|
       | / | < |   | < |   |   |   |
       | C | B | A | 8 | 4 | 2 | 1 |
       |---+---+---+---+---+---+---|

       For each character, the value of the check bit (0 or 1) is such
       as to make the sum of the bits, including the check bit, odd or
       even, according as the machine operates on odd or even parity.

  - Describe 8-bit BCD Codes.  [fn::page 40]  ::

       The 8-bit BCD codes add two bits to 6-bit BCD codes, so that it
       has 4 /zone bits/ in addition to the four 8-4-2-1 /numeric bits/, as shown:

       #+CAPTION:  8-Bit BCD Code
       |---+---+---+---+---+---+---+---|
       | / |   |   |   | < |   |   |   |
       | Z | Z | Z | Z | 8 | 4 | 2 | 1 |
       |---+---+---+---+---+---+---+---|

       This is typically called a byte.  Note that there is no /check
       bit/ or /parity bit/.

  - What are the two predominant 8-bit BCD codes in the computer industry today?  [fn::page 40]  ::

    1. *EBCDIC*: The "Extended Binary-Coded Decimal Interchange
       Code" was developed by IBM as an extension of the 6-bit BCD
       code and is used mainly by IBM and IBM-compatible computer
       systems.

    2. *ASCII-8*: The "American Standard Code for Information
       Interchange" was developed as a 7-bit standardization of
       various special codes, and was then extended to an 8-bit code.
       It is used mainly by non-IBM computer systems.  

    In both coding systems, a digit encodes its binary representation
    into the numerical portion of its code.

  - What does /zoned decimal format/ mean?  [fn::page 42]  ::

       EBCDIC uses a 4-bit group which occupies the zone portion of
       the rightmost digit in order to encode the sign of a number.

  - What does /packed decimal format/ mean?  [fn::page 42]  :: 

       A converted form of an 8-bit zoned decimal format into a form
       acceptable to a computer's arithmetic/logic unit, in which each
       digit is encoded in 4-bit BCD, as is the sign placed at the end
       of the number.

  - What is the procedure for converting /zoned decimal format/ to /packed decimal format/?  [fn::page 43]  ::

    1. The zone and numeric portions of the /rightmost byte/ are
       interchanged, bringing the sign of the number to the end of
       the format.

    2. The other zone portions are deleted and the remaining numeric
       portions are "packed" together.

* Computer Arithmetic

  - What do we mean by /significant digits/?  [fn::page 59]  ::

       /Significant digits/ count the digits of an approximate number
       /A/ that we have confidence in and measure its accuracy.

  - What are the formal rules for significant digits?  [fn::page 59] :: 

    1. A nonzero digit is always significant.

    2. The digit 0 is significant if it lies between other significant
       digits.

    3. The digit 0 is never significant when it precedes all the
       nonzero digits.

  - What does the /most significant digit/ mean?  [fn::page 59]  ::

       In a nonzero approximate number /A/ the /most significant
       digit/ of /A/ is the first (leftmost) significant digit.  It
       will always be the first nonzero digit in A.

  - What does the /least significant digit/ mean?  [fn::page 59]  :: 

       In a nonzero approximate number /A/ the /least significant
       digit/ of /A/ is the last (rightmost) significant digit.
       Typically, the least significant digit will be the last digit
       in /A/, zero or not.

  - What do we mean by the /precision/ of a computer?  [fn::page 60]  :: 

       Of all decimal numbers that can be stored (in coded form) in a
       /single/ memory location of a computer, the /precision/ refers
       to the /M/ significant digits in the number that has the
       greatest number of significant digits.

  - What are the rules for /rounding/?  [fn::page 60]  :: 

       In the following rules, "test digit" refers to the first
       (leftmost) digit to be dropped.

    1. *Rounding down*: If the test digit is smaller than 5, the
       preceding digits are unchanged.

    2. *Rounding up*: If the test digit is greater than 5 or is 5
       followed by /at least one nonzero digit/, the preceding digit
       is increased by 1 /with a carry of 1 if the preceding digit is
       9/.

    3. *Odd-add rule*: If the test digit is 5 with only 0s following,
       the preceding digit is unchanged if even but increased by 1 if
       odd.

  - What is the maximum /round-off error/ under the rules for rounding?  [fn::page 60]  ::

       The maximum /round-off error/ will be one-half the place value
       of the last retained digit.

  - What do we we mean by /truncating/ or /chopping/ of numerical values in a computer?  [fn::page 60]  :: 

       /Truncating/ or /chopping/ refers to simply dropping the least
       significant digits of an approximate number representation.

  - What is the size of the /truncation error/ or /chop-off error/?  [fn::page 60]  :: 

       The /truncation error/ or /chop-off error/ can be almost equal
       to the full place value of the last retained digit.

  - What is the /formal/ definition of the /absolute value/ of a number?  [fn::page 60] ::

       \begin{equation*}
       \lvert a \lvert =
       \begin{cases}
       a & (a > 0) \\
       0 & (a = 0) \\
       -a & (a < 0)
       \end{cases}
       \end{equation*}

  - What is /exponential form/?  [fn::page 61]  ::

       Expressing a number as a number times a power of ten.  Such
       forms are not unique.

  - What is /normalized exponential form/?  [fn::page 61]  :: 

       /Normalized exponential form/ is a /unique/ representation of a
       number as an exponential form, in which the decimal point
       appears directly in front of the first nonzero digit.

  - What does /mantissa/ refer to?  [fn::page 61]  :: 

       The /mantissa/ is /M/ in the normalized exponential form of a
       number $A = M \times 10^n$.

  - What does the /exponent/ refer to?  [fn::page 61]  :: 

       The /exponent/ is /n/ in the normalized exponential form of a
       number $A = M \times 10^n$.

  - What is /scientific notation/?  [fn::page 61]  :: 

       /Scientific notation/ is a /unique/ exponential form in which
       the decimal point appears directly /after/ the first nonzero
       digit.

  - What is the chief merit of /scientific notation/ over /normalized exponential form/?  [fn::page 61]  :: 

       Brevity

  - What do we mean by /word/ in a computer?  [fn::page 62]  :: 

       A /word/ is a list of a fixed number of bits to be treated as a
       single unit in the straight binary coding of a number.

  - What do we mean by /word length/?  [fn::page 62]  :: 

       The /word length/ is the number of bits in a /word/.  Computers
       typically have word lengths of either 32 or 64.

  - What do we mean by an /integer/ or /fixed-point number/ insofar as computers are concerned?  [fn::page 63]  :: 

       /Integers/ or /fixed-point numbers/ are numbers that have no
       decimal points.  An integer /J/ is represented in the memory of
       the computer by its binary form if /J/ is positive, and by the
       /2s complement/ of its absolute value if /J/ is negative.

  - What do we mean by a /floating-point/ or /real/ number insofar as computers are concerned?  [fn::page 63]  :: 

       /Floating-point/ or /real/ numbers have embedded decimal
       points, and are stored and processed in their /binary
       exponential forms, as follows.  

    1. There are 3 /fields/, or blocks of bits.

    2. The first field is a /sign bit/ (0 for + and 1 for -).

    3. The second field is the exponent.

    4. The third field is the mantissa.

  - What are two ways of represent the integer exponent /n/ of a floating-point number?  [fn::page 63]  ::

    1. as its binary form for /n > 0/ and its /2s complement/ when /n
       < 0/.

    2. as its /characteristic/ $n + 2^{t-1} where /t/ is the number of
       bis in the exponent field.

  - What range of exponents can be represented by a 7-bit exponent field?  [fn::page 64]  ::

       -64 to 63

  - What is the /characteristic/ for -61 in a 7-bit exponent field? :: 

       0

  - What is the /characteristic/ for 0 in a 7-bit exponent field? :: 

       64

  - What is the /characteristic/ for 63 in a 7-bit exponent field? :: 

       127

  - What is the main property of computer integer arithmetic?  [fn::page 64]  :: 

       The result of any operation must be an integer, /as
       represented in the computer/.  Thus, truncation and round-off
       may occur, such that the ordinary rules of arithmetic do not
       /generally/ hold.

  - What is the procedure for /real addition/?  [fn::page 65]  ::

    1. If two numbers to be added have the same exponent, the
       mantissas are added and the same exponent is used.

    2. If two number have different exponents, re-normalize the number
       with the smaller exponent so that the two numbers have the same
       exponent, then go to Step 1.

    3. Re-normalize and truncate.

  - What is the procedure for /real subtraction/  [fn::page 65]  ::

    1. If two numbers to be added have the same exponent, the
       mantissas are subtracted and the same exponent is used.

    2. If two number have different exponents, re-normalize the number
       with the smaller exponent so that the two numbers have the same
       exponent, then go to Step 1.

    3. Re-normalize and truncate.

  - What is the procedure for /real multiplication/  [fn::page 65]  ::

    1. Multiply the mantissas and /add/ the exponents.

    2. Re-normalize and truncate.

  - What is the procedure for /real division/  [fn::page 65]  ::

    1. Divide the mantissas and /subtract/ the exponents.

    2. Re-normalize and truncate.

  - What do we mean by the /absolute error/ $e$ between $A$ and its approximation $\bar{A}$?  [fn::page 66]  ::

       \[ e = A - \bar{A} \]

  - What do we mean by the /relative error/ $r$ between $A$ and its approximation $\bar{A}$?  [fn::page 66]  ::

       \[ r = \frac{e}{A} = \frac{A - \bar{A}}{A} \]

  - What theorem governs /round-off/ and /truncation/ error?  [fn::page 66]  :: 

       *Theorem*:

    1. When $A$ is rounded to $P$ significant digits, then $\lvert r_A
       \lvert < 0.5 \times 10^{-P+1}$.

    2. When $A$ is truncated to $P$ significant digits, then $\lvert r_A
       \lvert < 10^{-P+1}$.

* Logic, Truth Tables

  - What is a /statement/?  [fn::page 76]  ::

       A /statement/ is a meaningful declarative sentence that is
       either true or false.

  - What is /truth value/?  [fn::page 76]  :: 

       /Truth value/ is the truth or falsity of a /statement/.

  - What is a /compound statement/?  [fn::page 76]  :: 

       A /compound statement/ is one composed of sub-statements and
       various /connectives/.  

  - What is the fundamental property of a compound statement?  [fn::page 76]  :: 

       The fundamental property of a compound statement is that the
       truth value is completely determined by the /truth table/ of
       its sub-statements together with the way in which they are
       connected to form the compound statement.

  - What is a /connective/?  [fn::page 76]  :: 

       A /connective/ a word, such as "and" and "or", which connects
       two statements into a /conjunction/.

  - What is a /conjunction/?  [fn::page 76]  :: 

       A /conjunction/ is a compound statement composed of two
       /statements/ combined by one /connective/ "and".  It is
       represented symbolically by

       \[ p \land q \], \[ p \& q \], \[ p \cdot q \], or just \[ pq
       \]

       It has this /truth table/.

       |------------------+------------------+--------------------------|
       | $\boldsymbol{p}$ | $\boldsymbol{q}$ | $\boldsymbol{p \land q}$ |
       |------------------+------------------+--------------------------|
       | /                | <                | <                        |
       | <c>              | <c>              | <c>                      |
       | T                | T                | T                        |
       | T                | F                | F                        |
       | F                | T                | F                        |
       | F                | F                | F                        |
       |------------------+------------------+--------------------------|

  - What is a /disjunction/?  [fn::page 77]  ::

       A /disjunction/ is a compound statement composed of two
       /statements/ combined by the one /conjunction/ "or".  It is
       represented symbolically by

       \[ p \lor q \] or \[ p + q \]

       and has the /truth table/

       |------------------+------------------+-------------------------|
       | $\boldsymbol{p}$ | $\boldsymbol{q}$ | $\boldsymbol{p \lor q}$ |
       |------------------+------------------+-------------------------|
       | /                | <                | <                       |
       | <c>              | <c>              | <c>                     |
       | T                | T                | T                       |
       | T                | F                | T                       |
       | F                | T                | T                       |
       | F                | F                | F                       |
       |------------------+------------------+-------------------------|

  - What is an /exclusive disjunction/?  [fn::page 77]  ::

       An /exclusive disjunction/ is a disjunction when exactly /one/
       of the alternatives occurs.

  - What method do we /adopt/ for defining precisely the /truth value/ of a compound statement?  [fn::page 76]  ::

       The /truth table/ defines precisely the truth value of a
       compound statement.

  - What is /negation/?  [fn::page 77]  :: 

       A /negation/ statement reverses the /truth value/ of the
       corresponding non-negated statement.  It is represented
       symbolically by

       \[ \sim p \], \[ p' \], \[ \bar{p} \], or \[ \lnot p \]

       and its /truth table/ is 

       |------------------+-----------------------|
       | $\boldsymbol{p}$ | $\boldsymbol{\sim p}$ |
       |------------------+-----------------------|
       | /                | <                     |
       | <c>              | <c>                   |
       | T                | F                     |
       | F                | T                     |
       |------------------+-----------------------|

  - What is a /proposition/?  [fn::page 78]  ::

       A /proposition/ is a compound statement /P(p, q, ...)/ in which
       the sub-statement /p/, /q/, ... are variables.

  - What does the truth value of a proposition depend on?  [fn::page 78]  :: 

       The truth value of a proposition depends exclusively upon the
       truth values of its variables.

  - What is a /tautology/?  [fn::page 79]  ::

       A /tautology/ is a proposition that contains only /T/ in the
       last column of its truth table.  Put another way, it is an
       unfalsifiable proposition.

  - What is a /contradiction/?  [fn::page 79]  :: 

       A /contradiction/ is a proposition that contains only /F/ in
       the last column of its truth table.  Put another way, it is an
       unverifiable proposition.  It has this truth table.

  - What is the /Principle of Substitution/?  [fn::page 80]  :: 

       If /P(p, q, ...)/ is a tautology, then /P(P_1, P_2, ...)/ is a
       tautology for any propositions /P_1/, /P_2/, ...

  - What is /logical equivalence/?  [fn::page 80]  :: 

       Two propositions /P(p, q, ...)/ and /Q(p, q, ...)/ are said to
       be /logically equivalent/---or simply /equivalent/ or
       /equal/---if they have identical truth tables.  We denote it by

       \[ P(p, q, ...) \equiv Q(p, q, ...) \]

  - What are the /Idempotent Laws/ in the Algebra of Propositions?  [fn::page 81]  :: 

       \[ p \lor p \equiv p \]

       \[ p \land p \equiv p \]

  - What are the /Associative Laws/ in the Algebra of Propositions?  [fn::page 81]  ::

       \[ (p \lor q) \lor r \equiv p \lor (q \lor r) \]

       \[ (p \land q) \land r \equiv p \land (q \land r) \]

  - What are the /Commutative Laws/ in the Algebra of Propositions?  [fn::page 81]  ::

       \[ p \lor q \equiv q \lor p \]

       \[ p \land q \equiv q \land p \]

  - What are the /Distributive Laws/ in the Algebra of Propositions?  [fn::page 81]  :: 

       \[ p \lor (q \land r) \equiv (p \lor q) \land (p \lor r) \]

       \[ p \land (q \lor r) \equiv (p \land q) \lor (p \land r) \]

  - What are the /Identity Laws/ in the Algebra of Propositions?  [fn::page 81]  :: 

       \[ p \lor f \equiv p \]

       \[ p \lor t \equiv t \]

       \[ p \land t \equiv p \]

       \[ p \land f \equiv f \]

       Note that /t/ denotes a tautology and /f/ denotes a
       contradiction.

  - What are the /Complement Laws/ in the Algebra of Propositions?  [fn::page 81]  ::

       \[ p \lor \sim p \equiv t \]

       \[ \sim t \equiv f \]

       \[ p \land \sim p \equiv f \]

       \[ \sim f \equiv t \]

       Note that /t/ denotes a tautology and /f/ denotes a
       contradiction.

  - What is the /Involution Law/ in the Algebra of Propositions?  [fn::page 81]  :: 

       \[ \sim \sim p \equiv p \]

  - What are /DeMorgan's Laws/ in the Algebra of Propositions?  [fn::page 81]  :: 

       \[ \sim(p \lor q) \equiv \sim p \land \sim q \]

       \[ \sim(p \land q) \equiv \sim p \lor \sim q \]

  - What is a /conditional/?  [fn::page 80]  :: 

       A conditional is a statement of the form "If /p/ then /q/",
       "/p/ implies /q/", or "/p/ only if /q/", and is denoted by

       \[ p \to q \]

       It has this truth table.

       |------------------+------------------+-----------------------------------|
       | $\boldsymbol{p}$ | $\boldsymbol{q}$ | $\boldsymbol{p}\to\boldsymbol{q}$ |
       |------------------+------------------+-----------------------------------|
       | /                | <                | <                                 |
       | <c>              | <c>              | <c>                               |
       | T                | T                | T                                 |
       | T                | F                | F                                 |
       | F                | T                | T                                 |
       | F                | F                | T                                 |
       |------------------+------------------+-----------------------------------|

  - What is a /biconditional/?  [fn::page 80]  :: 

       A bi-conditional is a conditional of the form "/p/ if and only
       if /q/", and is denoted by

       \[ p \leftrightarrow q \]

       It has this truth table.

       |------------------+------------------+-----------------------------------------------|
       | $\boldsymbol{p}$ | $\boldsymbol{q}$ | $\boldsymbol{p}\leftrightarrow\boldsymbol{q}$ |
       |------------------+------------------+-----------------------------------------------|
       | /                | <                | <                                             |
       | <c>              | <c>              | <c>                                           |
       | T                | T                | T                                             |
       | T                | F                | F                                             |
       | F                | T                | F                                             |
       | F                | F                | T                                             |
       |------------------+------------------+-----------------------------------------------|

  - What is a logical equivalence for $p \to q$?  [fn::page 81]  ::

       \[ p \to q \equiv \sim p \lor q \]

  - What is the /converse/ of the proposition $p \to q$?  [fn::page 82]  :: 

       \[ q \to p \]

  - What is the /inverse/ of the proposition $p \to q$?  [fn::page 82]  :: 

       \[ \sim p \to \sim q \]

  - What is the /contrapositive/ of the proposition $p \to q$?  [fn::page 82]  :: 

       \[ \sim q \to \sim p \]

  - What is the truth table for the converse, inverse, and contrapositive?  [fn::page 82]  :: 

       |------------------+------------------+------------------+-----------------------------------+-----------------------------------------------+---------------------------------------------|
       |                  |                  | Conditional      | Converse                          | Inverse                                       | Contrapositive                              |
       | $\boldsymbol{p}$ | $\boldsymbol{q}$ | $\boldsymbol{q}$ | $\boldsymbol{p}\to\boldsymbol{q}$ | $\boldsymbol{\sim p}\to\boldsymbol{\sim q}$   | $\boldsymbol{\sim q}\to\boldsymbol{\sim p}$ |
       |------------------+------------------+------------------+-----------------------------------+-----------------------------------------------+---------------------------------------------|
       | /                | <                | <                | <                                 | <                                             | <                                           |
       | <c>              | <c>              | <c>              | <c>                               | <c>                                           | <c>                                         |
       | T                | T                | T                | T                                 | T                                             | T                                           |
       | T                | F                | F                | T                                 | T                                             | F                                           |
       | F                | T                | T                | F                                 | F                                             | T                                           |
       | F                | F                | T                | T                                 | T                                             | T                                           |
       |------------------+------------------+------------------+-----------------------------------+-----------------------------------------------+---------------------------------------------|

  - What theorem relates a conditional statement and its contrapositive?  [fn::page 82]  :: 

       *Theorem*: A conditional statement $p \to q$ and its
       contrapositive $\sim q \to \sim p$ are logically equivalent.

  - What is an /argument/?  [fn::page 82]  :: 

       An argument is a relationship between a set of propositions
       /P_1/, /P_2/, ..., /P_n/ called /premises/, and another
       proposition /Q/, called the /conclusion/; we denote an argument
       by

       \[ P_1, P_2, \ldots, P_n \vdash Q \]

  - What does /valid/ mean?  [fn::page 82]  :: 

       *Definition*: An argument $P_1, P_2, \ldots, P_n \vdash Q$ is
       /valid/ if $Q$ is true whenever all the premises $P_1, P_2,
       \ldots, P_n$ are true.

  - What is a /fallacy/?  [fn::page 82]  ::

       A fallacy is an argument that is not valid.

  - What is the /Law of Detachment/?  [fn::page 82]  :: 

       \[ p, p \to q \vdash q \]

  - What is an important theorem about an argument's validity?  [fn::page 83]  :: 

       *Theorem*: The argument $P_1, P_2, \ldots, P_n \vdash Q$ is
       valid if and only if $(P_1 \land P_2 \land \ldots \land P_n)
       \to Q$ is a tautology.

  - What is a the /Law of Syllogism/?  [fn::page 83]  ::

       \[ p \to q, q \to r \vdash p\to r \]

  - How many rows does a truth table have for /n/ premises?  [fn::page 83]  :: 

       2^n

  - On what does the validity of an argument depend?  [fn::page 83]  :: 

       The validity of an argument depends exclusively upon the formal
       structure of the argument.

  - What is /logical implication/?  [fn::page 84]  :: 

       A proposition /P(p, q, ...)/ logically implies a proposition
       /Q(p, q, ...)/ if /Q(p, q, ...)/ is true whenever /Q(p, q,
       ...)/.  We write this as

       \[ P(p, q, \ldots) \Rightarrow Q(p, q, ...) \]

  - What important theorem governs logical implication?  [fn::page 84]  :: 

       *Theorem*: For any propositions $P(p, q, \ldots)$ and $Q(p, q,
       \ldots)$, the following three statements are equivalent.

    1. $P(p, q, \ldots)$ logically implies $Q(p, q, \ldots)$.

    2. The argument $P(p, q, \ldots) \vdash Q(p, q, \ldots)$ is valid.

    3. The proposition $P(p, q, \ldots) \to Q(p, q, \ldots)$ is a tautology.

  - What is implied if $P \Rightarrow Q$ and $Q \Rightarrow P$?  [fn::page 84]  ::

       It implies that $P$ and $Q$ have the same truth table, and so
       $P \equiv Q$.

  - How are the notions of logical implication and logical equivalence related?  [fn::page 84]  :: 

       They are intimately related.

  - What is the relationship between biconditional statements and conditional statements  [fn::page 84]  :: 

       \[ (p \to q) \land (q \to p) \equiv p \leftrightarrow q \]

  - Express the biconditional $p \leftrightarrow q$ in terms of the original three connectives $\land$, $\lor$, and $\sim$.  [fn::page 84]  :: 

       \[ p \leftrightarrow q \equiv (\sim p \lor q) \land (\sim q
       \land p) \]

* Algorithms, Flowcharts, Pseudocode Programs

  - What is an /algorithm/?  [fn::page 95]  ::

       An algorithm is a step-by-step list of instructions for solving
       a particular problem.

* Sets and Relations

  - What is a /set/?  [fn::page 132]  ::

       A set is a collection of distinct objects, the /elements/ or
       /members/ of the set.  The statement "/p/ is an element of
       /A/," or, equivalently, "/p/ belongs to /A/," is written

       \[ p \in A \]

       The negation of $p \in A$ is written $p \notin A$.

  - What is the /Principle of Extension/?  [fn::page 132]  ::

       *Principle of Extension*: Two sets /A/ and /B/ are equal if and
       only if they have the same members.

  - What are two ways to specify a particular set?  [fn::page 132]  :: 

    1. If possible and practical, list its members.  For example,

       \[ A = \{a, e, i, o, u\} \]

    2. Otherwise, state the properties that characterize the elements
       in the set.  For example,

       \[ B = \{x : x \text{ is an integer}, x > 0\} \]

  - What is the /Principle of Abstraction/?  [fn::page 133]  ::

       *Principle of Abstraction*: Given any set /U/ and any property
       /P/, there is a set /A/ such that the elements of /A/ are
       exactly those members of /U/ which have the property /P/.

  - What is the /universal set/ or the /universe of discourse/?  [fn::page 133]  :: 

       The universal set or the universe of discourse contains the
       members of all the sets that are under investigation.
       Typically, it is denoted by the letter /U/.

  - What is the /empty set/ or the /null set/?  [fn::page 133]   :: 

       The empty set or the null set is the set with no members.
       Typically, it is denoted by $\emptyset$.

  - How is a /subset/ defined?  [fn::page 133]  :: 

       If every element of a set /A/ is also an element of a set /B/,
       then /A/ is called a subset of /B/.  This relationship is
       written as

       \[ A \subset B \]

       If /A/ is not a subset of /B/, then at least one element of
       /A/ does not belong to /B/.  This relationship is written as

       \[ A \not\subset B \]

  - What important theorem applies to subsets?  [fn::page 134]  ::

    1. For any set $A$, we have $\emptyset \subset A \subset U$.

    2. For any set $A$, we have $A \subset A$.

    3. If $A \subset B$, and $B \subset C$, then $A \subset C$.

    4. $A = B$ if and only if $A \subset B$ and $B \subset A$.

  - What does /disjoint/ mean?  [fn::page 134] :: 

       Two sets $A$ and $B$ are disjoint if they have no elements in
       common.

  - What is the definition of the /union/ of two sets.  [fn::page 136]  ::

       The union of two sets $A$ and $B$, denoted by $A \cup B$, is
       the set of all elements which belong to $A$ or to $B$.

       \[ A \cup B = \{ x : x \in A \text{ or } x \in B \} \]

  - What is the definition of the /intersection/ of two sets.  [fn::page 136]  :: 

       The intersection of two sets $A$ and $B$, denoted by $A \cap
       B$, is the set of all elements which belong to both $A$ or $B$.

       \[ A \cup B = \{ x : x \in A, x \in B \} \]

  - What theorem relates set union and intersection?  [fn::page 136]  :: 

       *Theorem*:  The following are equivalent.

       \[ A \subset B \]

       \[ A \cap B = A \]

       \[ A \cup B = B \]

       \[ A \subset B \leftrightarrow A \cap B = A \]

  - What is the definition of the /absolute complement/ or simply /complement/?  [fn::page 136]  :: 

       The absolute complement, or simply, complement of a set $A$,
       denoted by $A^c$, is the set of elements which belong to $U$
       but which do not belong to $A$:

       \[ A^c = \{ x : x \in U, x \not\in A \} \]

       Note that the following notations are equivalent for the
       complement of $A$: $A^c$, $A'$, $\bar{A}$.

  - What is the /relative complement/?  [fn::page 137]  :: 

       The relative complement of a set $B$ with respect to set $A$
       or, simply, the /difference/ of $A$ and $B$, denoted by $A
       \setminus B$, is the set of elements which belong to $A$ but
       which do not belong to $B$:

       \[ A \setminus B = \{ x : x \in A, x \not\in B \} \]

       Note that the following notations are equivalent for the
       relative complement of $B$ with respect to $A$: $A \setminus
       B$, $A - B$, $A \sim B$.

  - What are the /Idempotent Laws/ in the Algebra of Sets?  [fn::page 138]  ::

       \[ A \cup A = A \]

       \[ A \cap A = A \]

  - What are the /Associative Laws/ in the Algebra of Sets?  [fn::page 138]  :: 

       \[ (A \cup B) \cup C = A \cup (B \cup C) \]

       \[ (A \cap B) \cap C = A \cap (B \cap C) \]

  - What are the /Commutative Laws/ in the Algebra of Sets?  [fn::page 138]  :: 

       \[ A \cup B = B \cup A \]

       \[ A \cap B = B \cap A \]

  - What are the /Distributive Laws/ in the Algebra of Sets?  [fn::page 138]  :: 

       \[ A \cup (B \cap C) = (A \cup B) \cap (A \cup C) \]

       \[ A \cap (B \cup C) = (A \cap B) \cup (A \cap C) \]

  - What are the /Identity Laws/ in the Algebra of Sets?  [fn::page 138]  :: 

       \[ A \cup \emptyset = A \]

       \[ A \cup U = U \]

       \[ A \cap U = A \]

       \[ A \cap \emptyset = \emptyset \]

  - What is the /Involution Law/ in the Algebra of Sets?  [fn::page 138]  :: 

       \[ (A^c)^c = A \]

  - What are the /Complement Laws/ in the Algebra of Sets?  [fn::page 138]  :: 

       \[ A \cup A^c = U \]

       \[ U^c = \emptyset \]

       \[ A \cap A^c = \emptyset \]

       \[ \emptyset^c = U \]

  - What are /DeMorgan's Laws/ in the Algebra of Sets?  [fn::page 138]  ::

       \[ (A \cup B)^c = A^c \cap B^c \]

       \[ (A \cap B)^c = A^c \cup B^c \]

  - What is meant by the /dual/ of a set expression $E$ ?  [fn::page 138]  :: 

       The dual $E^*$ of $E$ is the expression obtained by replacing
       each occurrence of $\cup$, $\cap$, $U$, and $\emptyset$ in $E$
       by $\cap$, $\cup$, $\emptyset$, and $U$ respectively.

  - What is the /principal of duality/?  [fn::page 138]  :: 

       The principle of duality expresses the fact of set algebra that
       if $E$ is an identity then its dual $E^*$ is also an identity.

  - What is a /finite/ set?  [fn::page 138]  :: 

       A set is said to be finite if it contains /exactly/ $m$
       distinct elements where $m$ denotes some non-negative integer.

       Note that if a set $A$ is finite, then $n(A)$ or $\#(A)$
       denotes the number of elements in the set.  This is also known
       as the set's /cardinality/.

  - What is an /infinite/ set?  [fn::page 138]  :: 

       A set is said to be infinite if it is not finite.

  - What lemma relates disjoint finite sets?  [fn::page 139]  :: 

       *Lemma*: If $A$ and $B$ are disjoint finite set, then $A \cup
       B$ is finite and

       \[ n(A \cup B) = n(A) + n(B) \]

  - What theorem relates finite sets?  [fn::page 139]  :: 

       *Theorem*: If $A$ and $B$ are finite sets, the $A \cup B$ and
       $A \cap B$ are finite and

       \[ n(A \cup B) = n(A) + n(B) - n(A \cap B) \]

  - What corollary of this theorem extends it to $k = 3$ sets?  [fn::page 139]  :: 

       \[ n(A \cup B \cup C) = n(A) + n(B) + n(C) - n(A \cap B) - n(A
       \cap C) - n(B \cap C) + n(A \cap B \cap C) \]

  - What is a /class/ of sets or a /collection/ of sets?  [fn::page 140]  :: 

       A class of or collection of sets is just a set of sets.

  - What is a /power set/?  [fn::page 140]  :: 

       For a given set $S$, the power set $\mathscr{P}(S)$ is the set
       of all subsets of $S$.  It always includes the set $S$ itself
       as well as the empty set $\emptyset$.  It is sometimes denoted
       by $2^S$.

  - How many elements does the power set $\mathscr{P}(S)$ have?  [fn::page 140]  ::

       \[ 2^{n(S)} \]

       where $n(S)$ is the cardinality of $S$.

  - What is a /partition/ of a set /S/?  [fn::page 140]  ::

       A partition of $S$ is a collection $\{A_i\}$ of nonempty
       subsets of $S$ such that:

    1. Each $a$ in $S$ belongs to /exactly one/ of the $A_i$.

    2. The sets of $\{A_i\}$ are mutually disjoint; that is, if

       \[ A_i \not= A_j \text{ then } A_i \cap A_j = \emptyset \]

  - What are partition /cells/?  [fn::page 141]  ::

       Cells are the subsets in a partition.

  - What is an /ordered pair/?  [fn::page 141]  :: 

       An ordered pair consists of two elements, one of which is
       designated as the first element and the other as the second
       element.  Such an ordered pair is written $(a, b)$ where $a$ is
       the first element and $b$ is the second element.

  - When are two ordered pairs equal?  [fn::page 141]  :: 

       Two ordered pairs $(a, b)$ and $(c, d)$ are equal if and only
       if $a = c$ and $b = d$.

  - What is the /Cartesian product/?  [fn::page 141]  ::

       The Cartesian product, or just product, of two sets $A$ and $B$
       is the set of all ordered pairs $(a, b)$ where $a \in A$ and $b
       \in B$.  It is written as $A \times B$.  Its definition is

       \[ A \times B = \{(a, b) : a \in A, b \in B \} \]

       A Cartesian product of a set $A$ onto itself may be written as
       $A^2$ or as $A \times A$.

  - What is the cardinality of a Cartesian product?  [fn::page 142]  :: 

       \[ n(A \times B) = n(A) \cdot n(B) \]

  - What is the /product/ of a finite number of sets?  [fn::page 142]  ::

       For any sets $A_1$, $A_2$, ..., $A_n$, the set of all ordered
       /n/-tuples $(a_1, a_2, \ldots, a_n)$ where $a_1 \in A_1$, $a_2
       \in A_2$, ..., $a_n \in A_n$ is called the product of the sets
       $A_1$, $A_2$, ..., $A_n$ and is denoted by

       \[ A_1 \times A_2 \times \ldots \times A_n \]

       or

       \[ \prod_{i=1}^n A_i \]

  - What is the set of positive integers?  [fn::page 134]  :: 

       \[\boldsymbol{N}\]:  1, 2, 3, ...

  - What is the set of integers?  [fn::page 134]   :: 

       \[\boldsymbol{Z}\]:  ..., -2, -1, 0, 1, 2, ...

  - What is the set of rational numbers?  [fn::page 134]  :: 

       \[\boldsymbol{Q}\]

  - What is the set of real numbers?  [fn::page 134]  :: 

       \[\boldsymbol{R}\]

  - What is the /Cartesian plane/?  [fn::page 141]  :: 

       The Cartesian plane is the product of the set of real numbers
       $\boldsymbol{R}$ onto itself, $\boldsymbol{R}^2$.

  - How do we represent /n/-dimensional space in terms of the set of real numbers?  [fn::page 142]  :: 

       \[\boldsymbol{R}^n\]

  - What is a /binary relation/?  [fn::page 142]  :: 

       A binary relation (or just "relation"), $R$, /from/ $A$ /to/
       $B$ assigns to each ordered pair $(a, b)$ in $A \times B$
       exactly one of the following statements.

    1. "$a$ is related to $b$", written $a R b$.

    2. "$a$ is not related to $b$", written $a \cancel{R} b$.

  - What is a formal definition of a /relation/?  [fn::page 142]  ::

       *Definition*: A relation $R$ from $A$ to $B$ is a subset of $A
       \times B$.

  - What does /domain/ mean?  [fn::page 143]  :: 

       The domain of a relation $R$ is the set of all first elements
       of the ordered pairs which belong to $R$.

  - What does /range/ mean?  [fn::page 143]  :: 

       The range of a relation $R$ is the set of all second elements
       of the ordered pairs which belong to $R$.

  - What does /inverse/ mean?  [fn::page 143]  :: 

       Let $R$ be any relation from $A$ to $B$.  The inverse of a
       relation $R$, denoted by $R^{-1}$, is the relation from $B$ to
       $A$ which consists of those ordered pairs which when reversed
       belong to $R$:

       \[ R^{-1} = \{(b, a) : (a, b) \in R\} \]

  - What is the inverse of the inverse of a relation $R$ ? [fn::page 143]  :: 

       \[ (R^{-1})^{-1} = R \]

  - What is the /equality/ relation?  [fn::page 143]  :: 

       \[ \{(a, a) : \in A \} \]

  - What are the correspondences among the domains and ranges of a relation $R$ and its inverse $R^{-1}$  [fn::page 143]  ::

       The domain of $R^{-1}$ equals the range of $R$, and the range
       of $R^{-1}$ equals the domain of $R$.

  - What is a /graph/ of a relation?  [fn::page 143] :: 

       A graph of a relation is a pictorial representation of the
       relation.

  - What are some ways of picturing a relation?  [fn::page 144]  :: 

    1. coordinate diagram

    2. matrix

    3. arrow diagram

    4. directed graph

  - What is an /equivalence relation/?  [fn::page 145]  ::

       A relation $\sim$ on a set $S$ is called an equivalence
       relation if it has the following three properties:

    1. For each $a$ in $S$, we have $a \sim a$.  (/reflexivity/)

    2. If $a \sim b$, then $b \sim a$.  (/symmetry/)

    3. If $a \sim b$ and $b \sim c$, then $a \sim c$.  (/transitive/)

  - What is the /congruent modulo/ relation $m$ ?  [fn::page 145]  ::

       $a \equiv b (\text{mod} m)$ 
       
       if $m$ divides $a - b$.

  - What is an /equivalence class/?  [fn::page 146]  ::

       For an equivalence relation $\sim$ on a set $S$, the
       equivalence class is the set of all elements $[a]$ to which
       elements $a$ of $S$ are related.

       \[ [a] = \{ x : a \sim x \} \]

  - What is the /quotient/ of a set by an equivalence relation?  [fn::page 146]  :: 

       The quotient of $S$ by $\sim$ is the collection of all
       equivalence classes of $S$, denoted by $S/\sim$.

  - What theorem expresses the fundamental property of a quotient set?  [fn::page 146]  ::

       *Theorem*: Let $\sim$ be an equivalence relation on a set $S$.
       Then the quotient set $S/\sim$ is a partition of $S$.
       Specifically:

    1. For each $a$ in $S$, we have $a \in [a].

    2. $[a] = [b]$ if and only if $a \sim b$.

    3. If $[a] \not= [b]$, then $[a]$ and $[b]$ are disjoint.

  - Informally, what is a /function/?  [fn::page 146]  ::

       A function assigns to each element of the domain $A$ a unique
       element of the codomain $B$, and comprises the collection of
       such assignments.  If we denote a function with $f$ then we
       write

       \[ f : A \to B \]

       This is read "f is a function from $A$ into $B$" or "f takes
       (or maps) $A$ into $B$."

  - What is the /image/ or /value/ of an element under a function $f$ at $a$ ?  [fn::page 146]  :: 

       If $a \in A$ then $f(a)$ (read "/f/ of /a/") denotes the unique
       element of $B$ which $f$ assigns to $a$, and is called the
       image of $a$ under $f$, or the value of $f$ at $a$.

  - What is the /range/ or /image/?  [fn::page 146]  ::

       The range or image is the set of all image values of $f$.

  - What is a function /variable/?  [fn::page 147]  :: 

       A variable is a placeholder within a mathematical formula that
       expresses a function.

  - What is the /graph/ of a function?  [fn::page 147]  :: 

       The graph of a function $f : A \to B$ is the relation that
       arises from the function:

       Graph of $f$ = $\{(a, b) : a \in A, b \in f(a)\}$

  - What makes two functions equal?  [fn::page 147]  :: 

       Two functions $f : A \to B$ and $g : A \to B$ are equal,
       written $f=g$, if $f(a) = g(a)$ for every $a \in A$.  That is,
       they have the same graph.

  - What is the formal definition for a function?  [fn::page 147]  :: 

       *Definition*: A function $f : A \to B$ is a relation from $A$
       to $B$ (i.e., a subset of $A \times B$) such that each $a \in
       A$ belongs to a unique ordered pair $(a, b)$ in $f$.

  - What defining condition of a function translates into a geometrical condition on the pictorial representation of its graph?  [fn::page 147]  :: 

       No two points of this graph shall lie on the same vertical
       line.

  - What is the /identity function/?  [fn::page 147]  :: 

       The function from /A/ into /A/ which assigns to each element
       that element itself.

       \[ 1_A(a) = a \]

  - What is the /composition/ of functions /f/ and /g/?  [fn::page 164]  :: 

       The composition of /f/ and /g/, written $g \circ f$, is the
       function from the domain of /f/ into the codomain of /g/
       defined by

       \[ \left(g \circ f \right)(a) = g(f(a)) \]

  # - Here's a figure ::

  #      #+BEGIN_SRC ditaa :file fig1.png
  #      +--------------+
  #      | cRED         |
  #      | Hello, Dave! |
  #      |              |
  #      +--------------+
  #      #+END_SRC

  # - Here's another figure :: 

  #      #+BEGIN_SRC ditaa :file fig2.png
  #      +--------------\        +--------------\
  #      | cBLU         |	       | cGRE         |
  #      | Hello, Matt! *--------* Hello, there |
  #      | {s}          |	       | {s}          |
  #      \--------------+	       \--------------+
  #      #+END_SRC

  # - Trying graphviz mode :: 

  #      #+BEGIN_SRC dot :file file3.png
  #      graph graphname { 
  #               a -- b; 
  #               b -- c;
  #               b -- d;
  #               d -- a;
  #      }
  #      #+END_SRC

* Boolean Algebra, Logic Gates

  - What is a /Boolean Algebra/?  [fn::page 170]  ::

       Let $B$ be a set on which are defined two binary operations,
       $+$ and $*$, and a unary operation, $'$.  Let $0$ and $1$
       denote two distinct elements of $B$.  Then a /Boolean Algebra/
       is the following sextuplet

       \[ \langle B, +, *, ', 0, 1 \rangle \]

       so long as the /axioms of Boolean Algebra/ hold.

  - What are the /axioms of Boolean Algebra/?  [fn::page 170]  :: 

       For any elements /a, b, c/ of set /B/


       #+CAPTION:  Axioms of Boolean Algebra
       | /                 | <                             | <                           |
       | Commutative Laws  | $a + b = b + a$               | $a * b = b * a$             |
       | Distributive Laws | $a + (b*c) = (a + b)*(a + c)$ | $a*(b + c) = (a*b) + (a*c)$ |
       | Identity Laws     | $a + 0 = a$                   | $a*1 = a$                   |
       | Complement Laws   | $a + a' = 1$                  | $a*a' = 0$                  |

  - What is the /zero/ element of a Boolean algebra?  [fn::page 170]  ::

       The /zero/ element is 0 in the axioms of Boolean algebra.

  - What is the /unit/ element of a Boolean algebra?  [fn::page 170]  :: 

       The /unit/ element is 1 in the axioms of Boolean algebra.

  - What is the /sum/ in a Boolean algebra?  [fn::page 170]  :: 

       A /sum/ is the result of the operation +.

  - What is the /product/ in a Boolean algebra  [fn::page 170]  :: 

       A /product/ is the result of the operation *.

  - What are the zero and unit elements of the Boolean algebra $\mathscr{C}$, a collection of sets closed under union, intersection, and complement?  [fn::page 171]  :: 

       The zero element is the empty set $\emptyset$.  The unit
       element is the universal set $U$.

  - What are the zero and unit elements of the Boolean algebra $\Pi$, the set of propositions?  [fn::page 171]  :: 

       The zero element is /f/, a logical contradiction.  The unit
       element is /t/, a logical tautology.

  - What is the /dual/ of a statement in a Boolean algebra /B/?  [fn::page 171]  :: 

       The /dual/ of a statement is the statement obtained by
       interchanging the operations + and *, and interchanging the
       corresponding identity elements 0 and 1, in the original
       statement.

  - What is the /Principle of Duality/  [fn::page 171]  :: 

       *Theorem:* The dual of any theorem in a Boolean algebra is also
       a theorem.

  - What are the Basic Theorems of Boolean Algebra?  [fn::page 172]  :: 

       Let /a, b, c/ be any elements of a Boolean algebra B.

       *Theorem:*

       #+CAPTION:  Basic Theorems of Boolean Algebra
       | /                | <                           | <                   |
       | Idempotent Laws  | $a + a = a$                 | $a*a = a$           |
       | Boundedness Laws | $a + 1 = 1$                 | $a*0 = 0$           |
       | Absorption Laws  | $a + (a*b) = a$             | $a*(a + b) = a$     |
       | Associative Laws | $(a + b) + c = a + (b + c)$ | $(a*b)*c = a*(b*c)$ | 

  - What additional theorem adds to the properties of a Boolean algebra?  [fn::page 172]  ::

       *Theorem:* Let /a/ be any element in a Boolean algebra /B/.

    1. /Uniqueness of Complement/:  $a + x = 1, a*x = 0 \Rightarrow x = a'$

    2. /Involution Law/:  $(a')' = a$

    3. $0' = 1, 1' = 0$

  - What additional theorem rounds out the properties of a Boolean algebra?  [fn::page 172]  ::

       *Theorem (DeMorgan's Laws):*

    1. $(a + b)' = a' * b'$

    2. $(a*b)' = a' + b'$

  - What does /partial ordering/ on a set $S$, or a /poset/ mean?  [fn::page 172]  ::

       A /partial ordering/ on a set $S$, or a /poset/ is a relation
       $\lesssim$ that obeys the following three properties.

    1. $a \lesssim a, \forall a \in S$

    2. $a \lesssim b \land b \lesssim a \Rightarrow a = b$

    3. $a \lesssim b \land b \lesssim c \Rightarrow a \lesssim c$

  - What does $a \precsim b$ mean for a poset?  [fn::page 172]  ::

       It means "/a/ precedes /b/."

  - What does $a \succsim b$ mean for a poset?  [fn::page 172]  :: 

       It means "/a/ succeeds /b/."

  - What does $a \prec b$ mean for a poset?  [fn::page 172]  :: 

       It means "/a/ strictly precedes /b/" such that $a \precsim b
       \land a \not= b$.

  - What does $a \succ b$ mean for a poset?  [fn::page 172]  :: 

       It means "/a/ strictly succeeds /b/" such that $b \prec a$.

  - What does the poset relation "/a/ divides /b/" mean?  [fn::page 172]  :: 

       The poset relation "/a/ divides /b/", written $a \lvert b$,
       means

       \[ a \lvert b \Rightarrow \exists c \mid ac = b \]

  - What does /noncomparable/ mean?  [fn::page 172]  ::

       /Noncomparable/ applies to elements /a/ and /b/ of a set /S/ if
       neither $a \lesssim b$ nor $b \lesssim a$.

  - What does /comparable/ mean?  [fn::page 172]  :: 

       /Comparable/ applies to elements /a/ and /b/ of a set /S/ if
       either $a \lesssim b$ or $b \lesssim a$.

  - What does /totally ordered/ or /linearly ordered/ mean?  [fn::page 172]  ::

       /Totally ordered/ or /linearly ordered/ means that every pair
       of elements of /S/ are comparable.

  - What is a /chain/?  [fn::page 172]  ::

       A /chain/ is a set /S/ that is totally ordered.

  - What is the /usual order/ on the set of positive integers *N*?  [fn::page 173]  :: 

       The /usual order/ is the relation $le$ that imposes not just a
       partial order but a total order on *N*.

  - What important theorem of Boolean algebra applies to partially ordered sets?  [fn::page 173]  ::

       *Theorem:* Let /B/ be a Boolean algebra.  Then /B/ is a
       partially ordered set, where $a \lesssim b$ if and only if $a +
       b = b$.

  - How are the elements of a Boolean algebra related to the zero and unit elements?  [fn::page 173]  ::

       \[ 0 \lesssim a \lesssim 1 \forall a \in B \]

  - What is an /immediate successor/ in a Boolean algebra?  [fn::page 173]  ::

       An /immediate successor/ is an element $b$ of $S$ such that $a
       \prec b$ but there is no element $x$ of $S$ such that $a \prec
       x \prec b$.  It is written as $a \prec\prec b$.

       \[ a \prec b, \nexists x \mid a \prec x \prec b \]

  - What is an /atom/ of a Boolean algebra /B/?  [fn::page 173]  ::

       An /atom/ is an element /a/ in /B/ that is an immediate
       successor of the zero element.

       \[ 0 \prec\prec a \]

  - What theorem gives the cardinality a Boolean algebra?  [fn::page 173]  :: 

       *Theorem:* Let /B/ be a finite Boolean algebra having /n/
       atoms.  Then /B/ has 2^n elements, and every nonzero element
       of /B/ is the sum of a unique set of atoms.

* Simplification of Logic Circuits
* Vectors, Matrices, Subscripted Variables
* Linear Equations
* Combinatorial Analysis
* Probability
* Statistics; Random Variables
* Graphs, Directed Graphs, Machines

  - What is a /graph/?  [fn::page 319]  ::

       A graph $G$ consists of two things:  

    1. A set $V$ whose elements are called /vertices/, /points/, or
       /nodes/.

    2. A set $E$ of unordered pairs of distinct vertices, called
       /edges/.

       We denote a graph by $G(V, E)$ when we want to emphasize the to
       parts of $G$.

  - What does /adjacent/ mean?  [fn::page 319]  ::

       Vertices $u$ and $v$ are said to be adjacent if there is an
       edge $\{u, v\}$.

  - What does /endpoint/ mean?  [fn::page 319]  :: 

       An /endpoint/ is an end of an edge.  An edge has two endpoints,
       though the endpoints may correspond to the same vertex.

  - What is a /multigraph/?  [fn::page 319]  :: 

       A multigraph has /multiple edges/ connecting the same
       endpoints.  Therefore, the edges cannot form a set, since sets
       admit no duplicates, and therefore a multigraph cannot be a
       graph.

  - What is a /loop/?  [fn::page 319]  :: 

       A loop is an an edge whose endpoints are the same vertex.

  - What are /parallel edges/?  [fn::page 319]  :: 

       Parallel edges refers to multiple distinct edges that connect
       the same endpoints.

  - How can we define a /graph/ in relation to a /multigraph/?  [fn::page 319]  ::

       A graph is a multigraph without multiple edges or loops.

  - What is a /finite/ multigraph?  [fn::page 319]  :: 

       A finite multigraph has a finite number of vertices and a
       finite number of edges.

  - What is a /subgraph/?  [fn::page 320]  :: 

       A subgraph $G(V', E')$ of a graph $G(V, E)$ is one wherein:

    1. \[ V' \subset V \]

    2. \[ E' \subset E \] whose endpoints belong to $V'$.

  - In what way is a subgraph /generated/?  [fn::page 320]  ::

       In the definition of a subgraph, if $E'$ contains all the edges
       of $E$ whose endpoints lie in $V'$, then $G(V', E')$ is called
       the subgraph generated by $V'$.

  - What does /incident/ mean?  [fn::page 320]   :: 

       If $v$ is an endpoint of an edge $e$, then we say that $e$ is
       incident on $v$.

  - What does /degree/ mean?  [fn::page 320]  :: 

       The degree of a vertex $v$, written $\text{deg}(v)$, is equal
       to the number of edges which are incident on $v$.

  - What is an /isolated/ vertex?  [fn::page 320]  :: 

       An isolated vertex in a graph is one whose degree is 0.

  - What theorem relates a graph to the degrees of its vertices?  [fn::page 320]  :: 

       *Theorem*: The sum of the degrees of the vertices of a graph is
       equal to twice the number of edges.

  - How do we apply the theorem of graph edges and vertex degrees to a multigraph?  [fn::page 320]  :: 

       A loop counts twice towards the degree of its endpoint, in a
       multigraph.

  - What is a multigraph /walk/?  [fn::page 320]  :: 

       A walk in a multigraph consists of an alternating sequence of
       vertices and edges of the form

       \[ v_0, e_1, v_1, e_2, v_2, \ldots, e_{n-1}, v_{n-1}, e_n, v_n
       \]

       where each edge $e_i$ is incident on $v_{i-1}$ and $v_i$.

  - What is the /length/ of a walk?  [fn::page 320]  :: 

       The length of a walk is the number $n$ of edges in the walk.

  - What is a /closed/ walk?  [fn::page 320]  :: 

       A closed walk is one in which $v_0 = v_n$.

  - What do we call a walk that is not closed?  [fn::page 320]  :: 

       A walk from $v_0$ to $v_n$ that is not closed is said to be
       /between/ $v_0$ and $v_n$, or /connects/ $v_0$ to $v_n$.

  - What is a multigraph /trail/?  [fn::page 320]  :: 

       A trail is a walk in which all edges are distinct.

  - What is a multigraph /path/?  [fn::page 320]  :: 

       A path is a trail (and hence a walk) in which all vertices are
       distinct.

  - What is a multigraph /cycle/?  [fn::page 320]  :: 

       A cycle is a closed walk such that all vertices are distinct
       except $v_0$ = $v_n$.

  - Is a multigraph loop the same thing as a cycle?  [fn::page 320]  :: 

       No, because if we read the definition of a cycle carefully, it
       says that all vertices are distinct except for 1.  Therefore, a
       cycle must have at least 2 vertices.  A loop does not.

  - What is a multigraph /k-cycle/?  [fn::page 320]  :: 

       A k-cycle is a cycle of length k.

  - What theorem relates walks to paths?  [fn::page 321]  :: 

       *Theorem*: There is a walk from a vertex $u$ to a vertex $v$ if
       and only if there is a path from $u$ to $v$.

  - What does /connected/ mean?  [fn::page 321]  :: 

       A graph is said to be connected if there is a path between
       /any/ two of its vertices.

  - What is a /component/ of a graph?  [fn::page 321]  :: 

       A connected subgraph of a graph $G$ is called a connected
       component of $G$ if it is not contained in any larger connected
       subgraph.

  - What does /distance/ mean in a graph?  [fn::page 321]  :: 

       Distance is a function of two vertices.  The distance between
       vertices $u$ and $v$ of a connected graph $G$, written $d(u,
       v)$, is the length of the /shortest path/ between $u$ and $v$.

  - What does /diameter/ mean in a graph?  [fn::page 321]  :: 

       The diameter is not a function of any vertices.  Rather, it is
       a property of a /connected/ graph.  The diameter of a connected
       graph $G$ is the /maximum distance/ between any two if its
       vertices.

  - What do we mean by $G - v$ for graph $G$ and vertex $v$ ? [fn::page 321] :: 

       $G - v$ is the graph obtained from $G$ by deleting $v$ and all
       edges incident on $v$.

  - What is a /cut point/?  [fn::page 321]  :: 

       A cut point is a vertex $v$ in a connected graph $G$ if $G - v$
       is not connected (i.e., "disconnected").

  - What is a /complete/ graph?  [fn::page 321]  :: 

       A complete graph is one in which each vertex is connected to
       /every other vertex/.  The complete graph with $n$ vertices is
       denoted by $K_n$.

  - What is the /trivial/ graph?  [fn::page 321]  ::

       The trivial graph is $K_1$, the isolated vertex that is the
       distinct complete graph with just one vertex.  It is 0-regular.

  - What is a /regular of degree k/ or just /k-regular/ multigraph?  [fn::page 321]  :: 

       A multigraph is /regular of degree k/ or /k-regular/ if every
       vertex has the same degree /k/.

  - What is the degree regularity of a complete graph with $n$ vertices $K_n$ ?  [fn::page 321]  :: 

       The complete graph with $n$ vertices, $K_n$, is regular of
       degree /n/ - 1.

  - What is a /bipartite/ graph?  [fn::page 322]  :: 

       A graph $G$ is said to be /bipartite/ if its vertex $V$ can be
       partitioned into two subsets $M$ and $N$ such that each edge of
       $G$ connects a vertex of $M$ to a vertex of $N$.

  - What is a /complete bipartite graph/?  [fn::page 322]  :: 

       A /complete bipartite graph/ means that each vertex of $M$ is
       connected to each vertex of $N$, and is denoted by $K_{m,n}$
       where $m$ is the number of vertices in $M$ and $n$ is the
       number of vertices in $N$, and, for standardization, we assume
       $m \le n$.

  - How many edges are in a complete bipartite graph $K_{m,n}$ ?  [fn::page 322]  :: 

       \[K_{mn}\]

  - What is a /planar/ multigraph?  [fn::page 322]  :: 

       A /planar/ multigraph is one which can be draw in the plane so
       that its edges do not cross.

  - What is a /map/?  [fn::page 322]  :: 

       A /map/ is a /particular/ planar representation of a finite
       planar multigraph.  The /map/ is connected if the underlying
       /multigraph/ is connected.

  - What is a region?  [fn::page 322]  :: 

       A /region/ is a portion of the plane that a map divides it
       into.

  - What is Euler's theorem relating a graph's edges to the regions of any of its connected maps?  [fn::page 323]  :: 

       *Theorem*:  $V - E + R = 2$

       for $V$ vertices, $E$ edges, and $R$ regions

  - What is Euler's theorem for disconnected maps?  [fn::page 323]  :: 

       *Theorem*:  $V - E + R = \nu + 1$

       for $\nu$ connected map components

  - What is a /labeled graph/?  [fn::page 323]  :: 

       A /labeled graph/ $G$ is one whose edges and/or vertices are
       assigned data of one kind or another.

  - What is the /weight/ or /length/ of an edge?  [fn::page 323]  :: 

       The /weight/ or /length/ $\mathscr{L}(e)$ of an edge $e$ in
       a labeled graph $G$ is a nonnegative number.

  - What does /acyclic/ or /cycle-free/ mean?  [fn::page 324]  ::

       An /acyclic/ or /cycle-free/ graph has no cycles.

  - What is a /tree/?  [fn::page 324]  :: 

       A /tree/ is a connected acyclic graph.

  - What is a /forest/?  [fn::page 324]  :: 

       A /forest/ is an acyclic graph.  It may or may not be
       connected.

  - What theorem defines a tree?  [fn::page 325]  :: 

       *Theorem*: Let $G$ be a graph with more than one vertex.  Then
       the following are equivalent:

    1. $G$ is a tree.

    2. Each pair of vertices is connected by exactly one path.

    3. $G$ is connected, but if any edge is deleted then the resulting
       graph is not connected.

    4. $G$ is cycle-free, but if any edge is added to the graph then
       the resulting graph has exactly one cycle.

  - What theorem adds additional definitions for finite graphs?  [fn::page 325]  ::

       *Theorem*: Let $G$ be a finite graph with $n > 1$ vertices.
       Then the following are equivalent:

    1. $G$ is a tree.

    2. $G$ is cycle-free and has $n-1$ edges.

    3. $G$ is connected and has $n-1$ edges.

  - What are some general properties of trees?  [fn::page 325]  ::

    1. A tree is a bipartite graph.

    2. A tree is a planar graph.

    3. A finite nontrivial tree has at least two /endpoints/ (vertices
       of degree 1).

    4. In a nontrivial tree, each vertex is either an endpoint or a
       cut point.

  - What is a /spanning tree/?  [fn::page 325]  ::

       A /spanning tree/ is a subgraph $T$ of a graph $G$ if $T$ is a
       tree and $T$ includes all the vertices of $G$.

  - What is a /minimal spanning tree/?  [fn::page 325]  :: 

       A /minimal spanning tree/ of a graph $G$ is a spanning tree of
       $G$ such that the sum of the weights of its edges is minimal
       among all spanning trees of $G$.

  - What is an algorithm to find a minimal spanning tree of a finite connected labeled graph $G$ with $m$ vertices.  [fn::page 325]  :: 

       This algorithm is more difficult to program in a computer.

    1. Order the edges of $G$ according to decreasing weight.

    2. Proceeding sequentially, delete each edge which does not
       disconnect the graph until $m - 1$ edges remain.

    3. Take the remaining edges as forming a minimal spanning tree of
       $G$.

  - What is another algorithm to find a minimal spanning tree of a finite connected labeled graph $G$ with $m$ vertices.  [fn::page 325]  :: 

       This algorithm is less difficult to program in a computer.

    1. Order the edges according to increasing weight.

    2. Beginning with only the vertices of $G$, add one edge after
       another where each edge has minimal weight and does not form a
       cycle.

    3. After adding $m - 1$ edges obtain a minimal spanning tree.

  - Are minimal spanning trees unique?  [fn::page 326]  ::

       In general, no, since some edges can be of the same weight.

  - What is a /rooted tree/?  [fn::page 326]  :: 

       A /rooted tree/ $R$ consists of a tree graph together with a
       designated vertex $r$ called the /root/ of the tree.

  - What is the /level/ or /depth/ or /generation/ of a vertex in a rooted tree?  [fn::page 326]  :: 

       The length of the unique path from the root $r$ to $v$ is the
       /level/, /depth/, or /generation/.

  - What are the /leaves/ of a rooted tree?  [fn::page 326]  :: 

       The /leaves/ of a rooted tree are the endpoints, excluding the
       root $r$ (if it is an endpoint).

  - What is a /branch/ of a rooted tree?  [fn::page 326]   :: 

       A /branch/ is a continuously directed path from a vertex to a
       leaf.

  - What does /precedes/ mean in the context of a rooted tree?  [fn::page 326]  :: 

       A vertex $u$ /precedes/ a vertex $v$ if the path from the root
       $r$ to $v$ includes $u$.

  - What does /follows/ mean in the context of a rooted tree?  [fn::page 326]  :: 

       A vertex $v$ /follows/ a vertex $u$ if the path from the root
       $r$ to $v$ includes $u$.

  - What does /immediately follows/ mean in the context of a rooted tree?  [fn::page 326]  :: 

       A vertex $v$ /immediately follows/ $u$ if $v$ follows $u$ and
       is adjacent to $u$.  That is, there is an edge that includes
       $u$ and $v$.

  - What is an /ordered rooted tree/?  [fn::page 326]  :: 

       An /ordered rooted tree/ is a tree $R$ in which the edges
       leaving each vertex are linearly ordered.

  - What is a /directed graph/ or /digraph/?  [fn::page 328]  :: 

       A /directed graph/ or /digraph/ is a multigraph with a
       direction assigned to each edge.

  - What is an /arc/?  [fn::page 328]  :: 

       An /arc/ is a directed edge in a /digraph/, and is generally
       written as:

       \[ a = \langle u, v \rangle \]

  - What is an /initial point/?  [fn::page 328]  ::

       An /initial point/ is the first vertex in an arc of a digraph.
       An arc /begins/ at its /initial point/.

  - What is a /terminal point/?  [fn::page 328]  ::

       A /terminal point/ is the second vertex in an arc of a digraph.
       An arc /ends/ at its /terminal point/.

  - What is the /outdegree/ of a vertex $v$ in a digraph?  [fn::page 328]  :: 

       The /outdegree/ of a vertex $v$ in a digraph is the number of
       arcs beginning at $v$.

  - What is the /indegree/ of a vertex $v$ in a digraph?  [fn::page 328]  :: 

       The /indegree/ of a vertex $v$ in a digraph is the number of
       arcs ending at $v$.

  - What relationships relate indegrees, outdegrees, and arcs of a digraph?  [fn::page 328]  :: 

       The sum of the outdegrees equals the sum of the indegrees,
       which equals the number of arcs.

  - What is a /source/ in a digraph?  [fn::page 329]  :: 

       A /source/ is a vertex with 0 indegree.

  - What is a /sink/ in a digraph?  [fn::page 329]  ::

       A /sink/ is a vertex with 0 outdegree.

  - What is a /labeled directed graph/ or /labeled digraph/?  [fn::page 329]  :: 

       A /labeled directed graph/ or /labeled digraph/ is a digraph
       wherein the arcs and/or vertices are labeled with some type of
       data.

  - What is the relationship between the concepts of relations on a set and digraphs without parallel arcs?  [fn::page 329]  :: 

       They are one and the same.

  - What is the /matrix/ of a digraph?  [fn::page 329]  :: 

       Let $D$ be a digraph with vertices $v_1, v_2, \ldots, v_m$.
       The /matrix/ of $D$ is the $m \times m$ matrix $M_D =
       (m_{ij})$, where $m_{ij}$ = the number of arcs beginning at
       $v_i$ and ending at $v_j$.

  - What is the significance of digraph matrix with only zeroes and ones?  [fn::page 329]  :: 

       It has no parallel arcs.

  - What is a /walk/ in a digraph?  [fn::page 330]  :: 

       A /walk/ $W$ in a digraph $D$ is an alternating sequence of
       vertices and arcs,

       \[ W = (v_0, a_1, v_1, a_2, v_2, \ldots, a_n, v_n) \]

       such that each arch $a_i$ begins at $v_{i-1}$ ends at $v_i$.

  - What is a /semiwalk/ in a digraph?  [fn::page 330]  :: 

       A /semiwalk/ is a walk except that the arc $a_i$ may begin at
       either $v_{i-1}$ or $v_i$ and end at the other vertex.

       In other words, a semiwalk is the same as a walk on the
       undirected multigraph $D$.

  - What are the types of connectivity in a digraph $D$ ?  [fn::page 330] ::

    1. /Weakly connected/ or /weak/: there is a semipath between any
       two vertices $u$ and $v$ of $D$.

    2. /Unilaterally connected/ or /unilateral/: for any vertices $u$
       and $v$ of $D$, there is either a path from $u$ to $v$ or a
       path from $v$ to $u$.  Implies /weak/.

    3. /Strongly connected/ or /strong/: for any vertices $u$ and $v$
       of $D$, there is a path from $u$ to $v$ and from $v$ to $u$.
       Implies /unilateral/.

    4. /Strictly unilateral/:  /unilateral/ but not /strong/

    5. /Strictly weak/:  /weak/ but not /unilateral/

  - What is a /spanning walk/?  [fn::page 331]  ::

       A /spanning walk/ is a walk containing all the vertices of a
       digraph.

  - What theorem governs the connectivity of spanning walks?  [fn::page 331]  :: 

       *Theorem*:  Let $D$ be a finite digraph.  Then

    1. $D$ is weak if and only if $D$ has a spanning semiwalk.

    2. $D$ is unilateral if and only if $D$ has a spanning walk.

    3. $D$ is strong if and only if $D$ has a closed spanning walk

  - What theorem relates the number of walks in a digraph?  [fn::page 331]  ::

       *Theorem*: Let $M$ be the matrix of a digraph $D$.  Then the
       /(i, j)/-entry of the matrix $M^n$ gives the number of walks of
       length $n$ from the vertex $v_i$ to the vertex $v_j$.

  - What theorem relates sources, sinks, and cycles in a digraph?  [fn::page 331]  :: 

       *Theorem*: If a finite digraph $D$ contains no (directed)
       cycles, then $D$ contains at least one source and at least one
       sink.

  - What is the definition of a /finite state machine/ or /complete sequential machine/?  [fn::page 331]  :: 

       A /finite state machine/ or /complete sequential machine/ $M =
       \langle A, S, Z, f, g \rangle$ consists of five things.

    1. A finite set $A$ of /input symbols/.

    2. A finite set $S$ of /internal states/.

    3. A finite set $Z$ of /output symbols/.

    4. A /next-state function/ $f$ from $S \times A$ into $S$.

    5. An /output function/ $g$ from $S \times A$ into $Z$.

  - How is a finite state machine designated when it also is given an /initial state/ $q_0$ ?  [fn::page 331]  ::

       \[ M = \langle A, S, Z, q_0, f, g \rangle \]

  - What is a /state diagram/ for a finite state machine?  [fn::page 332]  ::

       A /state diagram/ is a compact form for representing a finite
       state machine and is a labeled directed graph $D$.  The
       vertices of $D$ are the states $S$ of $M$ and if $f(q_i, q_j) =
       q_k$ and $g(q_i, q_j) = z_r$ then there is an arc from $q_i$ to
       $q_k$ which is labeled with the pair $a_j, z_r$.

  - What is a /state table/ for a finite state machine?  [fn::page 332]  :: 

       A /state diagram/ is a compact form for representing a finite
       state machine which for each combination of state and input
       lists the next state and the output.

  - What theorem applies finite state machines to simple arithmetic?  [fn::page 333]  :: 

       *Theorem*: There is no finite state machine which can do binary
       multiplication.  However, if we limit the size of the numbers
       to be multiplied, then such machines do exist.

  - What is a /finite automaton/?  [fn::page 334]  :: 

       A /finite automaton/ $M = \langle A, S, T, q_0, f \rangle$
       consists of five things.

    1. A finite set $A$ of /input symbols/.

    2. A finite set $S$ of /internal states/.

    3. A subset $T$ of $S$ (whose elements are called /accepting
       states/).

    4. An /initial state/ $q_0$ in $S$.

    5. A /next-state function/ $f$ from $S \times A$ into $S$.

  - What does it mean for a finite automaton to /recognize/ or /accept/ an input string $W$ ?  [fn::page 334]  ::

       A finite automaton /recognizes/ or /accepts/ an input string
       $W$ if the final state $s_n$ is an accepting state, i.e., $s
       \in T$.

  - What is an analogy between finite state machines and finite automata?  [fn::page 334]  :: 

       A finite automaton is a finite state machine equipped with an
       output function $g$ from $S \times A$ into $Z = \{\text{YES},
       \text{NO}\}$ as follows:

       \begin{equation*}
       g(q_i, a_j) =
       \begin{cases}
       \text{YES} & \text{ if } f(q_i, a_j) \text{ is accepting (belongs to } T \text{)} \\
       \text{NO} & \text{ if } f(q_i, a_j) \text{ is nonaccepting } 
       \end{cases}
       \end{equation*}

  - In a tree, which vertices are cut points?  [fn::page 339]  ::

       Each vertex of degree greater than 1 is a cut point in a tree.

  - What is the /scope/ of a vertex /v/ in a rooted tree?  [fn::page 339]  :: 

       The /scope/ of a vertex /v/ in a rooted tree is the subtree,
       with root /v/, generated by /v/ and the vertices which follow
       /v/ in the tree.

  - What does it mean that there are two distinct paths between a pair of vertices in a graph?  [fn::page 339]  :: 

       It means that the graph contains a cycle.

  - What important property does a graph have if it contains a cycle /C/ which contains an edge /e/?  [fn::page 340]  ::

       The subgraph /G - e/ is connected.

  - What important property does a graph have if /e = {u, v}/ is an edge such that /G - e/ is disconnected?  [fn::page 340]  :: 

       Then /u/ and /v/ belong to different connected components of
       /G - e/.

  - What does the relation /relatively prime/ mean?  [fn::page 340]  :: 

       The variable /x/ is /relatively prime/ to /y/ the two have no
       common divisor other than 1.  We write this as $x \perp y$.

  - What is a /bridge/?  [fn::page 344]  :: 

       A /bridge/ is an edge /e/ in a connected graph /G/ if /G - e/
       is disconnected.

  - When is an edge /e/ a bridge?  [fn::page 344]  :: 

       An edge /e/ is a bridge of a connected graph /G/ /if and only
       if/ /e/ is not contained in any cycle of /G/.

  - What is the diameter of any complete bipartite graph?  [fn::page 345]  :: 

       \begin{equation*}
       \text{diam}(K_{n,n}) =
       \begin{cases}
       1 & n = 1 \\
       2 & n \not= 1
       \end{cases}
       \end{equation*}

  - When is a graph bipartite?  [fn::page 345]  :: 

       A graph is bipartite /if and only if/ each of its cycles is of
       even length.

  - What kind of graph is a tree?  [fn::page 345]  :: 

       Any tree is a bipartite graph.

  - What procedure will generate every subgraph of a finite graph /G/?  [fn::page 345]  :: 

    1. Delete an edge.

    2. Delete a vertex and all edges incident on that vertex.

  - How can a graph /G/ be partitioned into its connected components?  [fn::page 345]  ::

       Choose an appropriate equivalence relation on the vertices of
       /G/.

  - What makes a digraph /D/ /complete/?  [fn::page 346]  :: 

       A digraph /D/ is /complete/ if for each pair of distinct
       vertices $v_i$ and $v_j$ either $\langle v_i, v_j \rangle$ is
       an arc or $\langle v_j, v_i \rangle$ is an arc.

  - What important property does a finite, complete digraph /D/ possess?  [fn::page 346]  :: 

       It has a path which includes all of the vertices.

# Local variables:
# org-html-postamble: nil
# End:

#  LocalWords:  sim lnot DeMorgan's leftrightarrow vdash Rightarrow
#  LocalWords:  notin emptyset setminus usepackage mathrsfs mathscr
#  LocalWords:  le mn langle rangle outdegree indegree indegrees ij
#  LocalWords:  outdegrees semiwalk perp lesssim forall precsim prec
#  LocalWords:  succsim succ nexists amsmath amssymb circ ditaa png
#  LocalWords:  cRED cBLU cGRE graphviz graphname
